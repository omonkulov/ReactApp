{"version":3,"sources":["Pathfinder/Node/Node.jsx","Pathfinder/Pathfinder.jsx","App.js","reportWebVitals.js","index.js"],"names":["Node","props","state","this","col","row","onMouseDown","onMouseEnter","onMouseUp","isWall","isStart","extraClassName","isFinish","id","className","Component","Pathfinder","ROWS","Math","floor","window","innerHeight","COLM","innerWidth","grid","mouseIsPressed","paint","handleMouseDown2","bind","handleMouseDown3","maxRows","maxCols","currentRow","push","createNode","setState","newGrid","node","newNode","console","log","map","rowIdx","colIdx","handleMouseDown","handleMouseEnter","handleMouseUp","onClick","distance","Infinity","isVisited","previousNode","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4RAqCeA,E,kDAjCX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IACDC,MAAQ,GAFE,E,0CAInB,WAAU,IAAD,IAUDC,KAAKF,MARLG,EAFC,EAEDA,IACAC,EAHC,EAGDA,IACAC,EAJC,EAIDA,YACAC,EALC,EAKDA,aACAC,EANC,EAMDA,UACAC,EAPC,EAODA,OACAC,EARC,EAQDA,QAIEC,EAZD,EASDC,SAIW,SACTF,EAAU,QACVD,EAAS,QAAU,GACzB,OACI,uBAAII,GAAIV,KAAKF,MAAMY,GAAIC,UAAU,QAAjC,yCACuBH,IADvB,6BAEiB,kBAAML,OAFvB,8BAGkB,kBAAMC,EAAaF,EAAKD,MAH1C,2BAIe,kBAAMI,OAJrB,Q,GAtBOO,aCSbC,G,wDACF,WAAYf,GAAQ,IAAD,8BACf,cAAMA,IACDC,MAAQ,CACTe,KAAMC,KAAKC,MAA4B,GAArBC,OAAOC,YAAoB,IAC7CC,KAAMJ,KAAKC,MAA2B,GAApBC,OAAOG,WAAmB,IAC5CC,KAAM,GACNC,gBAAgB,EAChBC,OAAO,GAEX,EAAKC,iBAAmB,EAAKA,iBAAiBC,KAAtB,gBACxB,EAAKC,iBAAmB,EAAKA,iBAAiBD,KAAtB,gBAVT,E,qDAanB,WACI,IAAMJ,EAAO,GACTM,EAAU3B,KAAKD,MAAMe,KACzBa,EAAUA,EApBD,GAoBsBA,EApBtB,GAqBT,IAAIC,EAAU5B,KAAKD,MAAMoB,KACzBS,EAAUA,EAvBD,GAuBsBA,EAvBtB,GAyBT,IAAK,IAAI1B,EAAM,EAAGA,EAAMyB,EAASzB,IAAO,CAEpC,IADA,IAAM2B,EAAa,GACV5B,EAAM,EAAGA,EAAM2B,EAAS3B,IAC7B4B,EAAWC,KAAKC,EAAW9B,EAAKC,IAEpCmB,EAAKS,KAAKD,GAEd7B,KAAKgC,SAAS,CAAEX,W,6BAGpB,WACIrB,KAAKgC,SAAS,CAAEV,gBAAgB,M,8BAGpC,WACItB,KAAKgC,SAAS,CAAET,OAAO,M,8BAE3B,WACIvB,KAAKgC,SAAS,CAAET,OAAO,M,8BAG3B,SAAiBrB,EAAKD,GAClB,GAAKD,KAAKD,MAAMuB,eAAhB,CAEA,IAAMW,EAAUjC,KAAKD,MAAMsB,KACrBa,EAAOD,EAAQ/B,GAAKD,GACpBkC,EAAO,2BACND,GADM,IAET5B,OAAQN,KAAKD,MAAMwB,QAEvBU,EAAQ/B,GAAKD,GAAOkC,EACpBnC,KAAKgC,SAAS,CAAEX,KAAMY,O,2BAG1B,WACIjC,KAAKgC,SAAS,CAAEV,gBAAgB,M,oBAGpC,WAAU,IAAD,OACLc,QAAQC,IAAI,iBADP,IAEGhB,EAASrB,KAAKD,MAAdsB,KAER,OACI,sBAAKV,UAAU,OAAf,UACI,gCACI,gCACKU,EAAKiB,KAAI,SAACpC,EAAKqC,GACZ,OACI,oBAAI7B,GAAI6B,EAAR,SACKrC,EAAIoC,KAAI,SAACJ,EAAMM,GAAY,IAChBtC,EAAwCgC,EAAxChC,IAAKD,EAAmCiC,EAAnCjC,IAAKM,EAA8B2B,EAA9B3B,QAASE,EAAqByB,EAArBzB,SAAUH,EAAW4B,EAAX5B,OACrC,OACI,cAAC,EAAD,CAAMI,GAAI8B,EACNvC,IAAKA,EACLC,IAAKA,EACLI,OAAQA,EACRC,QAASA,EACTE,SAAUA,EACVa,eAAgB,EAAKvB,MAAMuB,eAC3BnB,YAAa,kBAAM,EAAKsC,mBACxBrC,aAAc,SAACF,EAAKD,GAAN,OAAc,EAAKyC,iBAAiBxC,EAAKD,IACvDI,UAAW,kBAAM,EAAKsC,kBATHH,OAJdD,UAuBrC,wBAAQK,QAAS5C,KAAKwB,iBAAtB,mBACA,wBAAQoB,QAAS5C,KAAK0B,iBAAtB,mBACA,wCAAW1B,KAAKD,MAAMuB,eAAiB,OAAS,kB,GA9FvCV,cAmGnBmB,EAAa,SAAC9B,EAAKC,GACrB,MAAO,CACLD,MACAC,MACAK,QA/GiB,KA+GRL,GA9GQ,KA8GkBD,EACnCQ,SA9GkB,KA8GRP,GA7GQ,KA6GmBD,EACrC4C,SAAUC,IACVC,WAAW,EACXzC,QAAQ,EACR0C,aAAc,OAcLnC,IC5HAoC,MARf,WACE,OACE,qBAAKtC,UAAU,MAAf,SACE,cAAC,EAAD,OCOSuC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.4c3c0b25.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './Node.css';\n\nclass Node extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {}\n    }\n    render() {\n        const {\n            col,\n            row,\n            onMouseDown,\n            onMouseEnter,\n            onMouseUp,\n            isWall,\n            isStart,\n            isFinish\n        } = this.props;\n\n        const extraClassName =\n            isFinish ? \"finish\"\n            : isStart ? \"start\"\n            : isWall ? \"walls\" : \"\";\n        return (\n            <td id={this.props.id} className=\"node\"\n                className={`node ${extraClassName}`}\n                onMouseDown={() => onMouseDown()}\n                onMouseEnter={() => onMouseEnter(row, col)}\n                onMouseUp={() => onMouseUp()}\n            >\n\n            </td>\n        );\n    }\n}\n\nexport default Node;\n","import React, { Component } from 'react';\nimport Node from './Node/Node'\nimport './Pathfinder.css';\n\nconst START_NODE_ROW = 10;\nconst START_NODE_COL = 15;\nconst FINISH_NODE_ROW = 10;\nconst FINISH_NODE_COL = 35;\nconst MAX_COLS = 80;\nconst MAX_ROWS = 80;\n\n//TODO: CLEAN UP\nclass Pathfinder extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            ROWS: Math.floor((window.innerHeight * .3) / 20),\n            COLM: Math.floor((window.innerWidth * .8) / 20),\n            grid: [],\n            mouseIsPressed: false,\n            paint: true,\n        }\n        this.handleMouseDown2 = this.handleMouseDown2.bind(this);\n        this.handleMouseDown3 = this.handleMouseDown3.bind(this);\n    }\n\n    componentDidMount() {\n        const grid = [];\n        let maxRows = this.state.ROWS;\n        maxRows = maxRows < MAX_ROWS ? maxRows: MAX_ROWS;\n        let maxCols = this.state.COLM;\n        maxCols = maxCols < MAX_COLS ? maxCols : MAX_COLS;\n        \n        for (let row = 0; row < maxRows; row++) {\n            const currentRow = [];\n            for (let col = 0; col < maxCols; col++) {\n                currentRow.push(createNode(col, row));\n            }\n            grid.push(currentRow);\n        }\n        this.setState({ grid });\n    }\n\n    handleMouseDown() {\n        this.setState({ mouseIsPressed: true });\n    }\n\n    handleMouseDown2() {\n        this.setState({ paint: true });\n    }\n    handleMouseDown3() {\n        this.setState({ paint: false });\n    }\n\n    handleMouseEnter(row, col) {\n        if (!this.state.mouseIsPressed) return;\n        //const newGrid = getNewGridWillWallToggled(this.state.grid, row, col);\n        const newGrid = this.state.grid;\n        const node = newGrid[row][col];\n        const newNode = {\n            ...node,\n            isWall: this.state.paint\n        };\n        newGrid[row][col] = newNode;\n        this.setState({ grid: newGrid });\n    }\n\n    handleMouseUp() {\n        this.setState({ mouseIsPressed: false });\n    }\n\n    render() {\n        console.log('render called');\n        const { grid } = this.state;\n\n        return (\n            <div className=\"grid\">\n                <table>\n                    <tbody>\n                        {grid.map((row, rowIdx) => {\n                            return (\n                                <tr id={rowIdx} key={rowIdx}>\n                                    {row.map((node, colIdx) => {\n                                        const { row, col, isStart, isFinish, isWall } = node;\n                                        return (\n                                            <Node id={colIdx} key={colIdx}\n                                                col={col}\n                                                row={row}\n                                                isWall={isWall}\n                                                isStart={isStart}\n                                                isFinish={isFinish}\n                                                mouseIsPressed={this.state.mouseIsPressed}\n                                                onMouseDown={() => this.handleMouseDown()}\n                                                onMouseEnter={(row, col) => this.handleMouseEnter(row, col)}\n                                                onMouseUp={() => this.handleMouseUp()}\n                                            >\n                                            </Node>\n                                        )\n                                    })}\n                                </tr>\n                            );\n                        })}\n                    </tbody>\n                </table>\n                <button onClick={this.handleMouseDown2}>Erase</button>\n                <button onClick={this.handleMouseDown3}>Paint</button>\n                <p>Hello: {this.state.mouseIsPressed ? \"True\" : \"False\"}</p>\n            </div>\n        );\n    }\n}\nconst createNode = (col, row) => {\n    return {\n      col,\n      row,\n      isStart: row === START_NODE_ROW && col === START_NODE_COL,\n      isFinish: row === FINISH_NODE_ROW && col === FINISH_NODE_COL,\n      distance: Infinity,\n      isVisited: false,\n      isWall: false,\n      previousNode: null\n    };\n  };\nconst getNewGridWillWallToggled = (grid, row, col) => {\n    const newGrid = grid.slice();\n    const node = newGrid[row][col];\n    const newNode = {\n        ...node,\n        isWall: !node.isWall\n    };\n    newGrid[row][col] = newNode;\n    return newGrid;\n};\n\nexport default Pathfinder;","import React from 'react';\nimport Pathfinder from './Pathfinder/Pathfinder'\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Pathfinder></Pathfinder>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}